{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.0.5",
    "parameters": {
        "targetVnetResourceId": {
            "type": "string",
            "minLength": 79,
            "metadata": {
                "description": "The regional network spoke VNet Resource ID that the cluster will be joined to"
            }
        },
        "clusterAdminAadGroupObjectId": {
            "type": "string",
            "metadata": {
                "description": "Azure AD Group in the identified tenant that will be granted the highly privileged cluster-admin role."
            }
        },
        "k8sControlPlaneAuthorizationTenantId": {
            "type": "string",
            "metadata": {
                "description": "Your AKS control plane Cluster API authentication tenant"
            }
        },
        "appGatewayListenerCertificate": {
            "type": "string",
            "metadata": {
                "description": "The certificate data for app gateway TLS termination. It is base64"
            }
        },
        "aksIngressControllerCertificate": {
            "type": "string",
            "metadata": {
                "description": "The base 64 encoded AKS Ingress Controller public certificate (as .crt or .cer) to be stored in Azure Key Vault as secret and referenced by Azure Application Gateway as a trusted root certificate."
            }
        },
        "clusterAuthorizedIPRanges": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "IP ranges authorized to contact the Kubernetes API server. Passing an empty array will result in no IP restrictions. If any are provided, remember to also provide the public IP of the egress Azure Firewall otherwise your nodes will not be able to talk to the API server (e.g. Flux)."
            }
        },
        "location": {
            "defaultValue": "eastus2",
            "type": "string",
            "allowedValues": [
                "australiaeast",
                "canadacentral",
                "centralus",
                "eastus",
                "eastus2",
                "westus2",
                "francecentral",
                "germanywestcentral",
                "northeurope",
                "southafricanorth",
                "southcentralus",
                "uksouth",
                "westeurope",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "AKS Service, Node Pool, and supporting services (KeyVault, App Gateway, etc) region. This needs to be the same region as the vnet provided in these parameters."
            }
        },
        "geoRedundancyLocation": {
            "defaultValue": "centralus",
            "type": "string",
            "allowedValues": [
                "australiasoutheast",
                "canadaeast",
                "eastus2",
                "westus",
                "centralus",
                "westcentralus",
                "francesouth",
                "germanynorth",
                "westeurope",
                "ukwest",
                "northeurope",
                "japanwest",
                "southafricawest",
                "northcentralus",
                "eastasia",
                "eastus",
                "westus2",
                "francecentral",
                "uksouth",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "For Azure resources that support native geo-redunancy, provide the location the redundant service will have its secondary. Should be different than the location parameter and ideally should be a paired region - https://docs.microsoft.com/azure/best-practices-availability-paired-regions. This region does not need to support availability zones."
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.20.2",
            "type": "string"
        }
    },
    "variables": {
        "networkContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7')]",
        "monitoringMetricsPublisherRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
        "acrPullRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "managedIdentityOperatorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830')]",
        "virtualMachineContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
        "readerRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7')]",

        "subRgUniqueString": "[uniqueString('aks', subscription().subscriptionId, resourceGroup().id)]",

        "nodeResourceGroupName": "[concat('rg-', variables('clusterName'), '-nodepools')]",
        "clusterName": "[concat('aks-', variables('subRgUniqueString'))]",
        "logAnalyticsWorkspaceName": "[concat('la-', variables('clusterName'))]",
        "containerInsightsSolutionName": "[concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')')]",
        "defaultAcrName": "[concat('acraks', variables('subRgUniqueString'))]",

        "vNetResourceGroup": "[split(parameters('targetVnetResourceId'),'/')[4]]",
        "vnetName": "[split(parameters('targetVnetResourceId'),'/')[8]]",
        "vnetNodePoolSubnetResourceId": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-clusternodes')]",
        "vnetIngressServicesSubnetResourceId": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-cluster-ingressservices')]",

        "agwName": "[concat('apw-', variables('clusterName'))]",
        "apwResourceId": "[resourceId('Microsoft.Network/applicationGateways', variables('agwName'))]",

        "acrPrivateDnsZonesName": "privatelink.azurecr.io",
        "akvPrivateDnsZonesName": "privatelink.vaultcore.azure.net",

        "clusterControlPlaneIdentityName": "[concat('mi-', variables('clusterName'), '-controlplane')]",

        "keyVaultName": "[concat('kv-', variables('clusterName'))]",

        "policyResourceIdAKSLinuxRestrictive": "/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00",
        "policyResourceIdEnforceHttpsIngress": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
        "policyResourceIdEnforceInternalLoadBalancers": "/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e",
        "policyResourceIdRoRootFilesystem": "/providers/Microsoft.Authorization/policyDefinitions/df49d893-a74c-421d-bc95-c663042e5b80",
        "policyResourceIdEnforceResourceLimits": "/providers/Microsoft.Authorization/policyDefinitions/e345eecc-fa47-480f-9e88-67dcc122b164",
        "policyResourceIdEnforceImageSource": "/providers/Microsoft.Authorization/policyDefinitions/febd0533-8e55-448f-b837-bd0e06f16469",
        "policyAssignmentNameAKSLinuxRestrictive": "[guid(variables('policyResourceIdAKSLinuxRestrictive'), resourceGroup().name, variables('clusterName'))]",
        "policyAssignmentNameEnforceHttpsIngress": "[guid(variables('policyResourceIdEnforceHttpsIngress'), resourceGroup().name, variables('clusterName'))]",
        "policyAssignmentNameEnforceInternalLoadBalancers": "[guid(variables('policyResourceIdEnforceInternalLoadBalancers'), resourceGroup().name, variables('clusterName'))]",
        "policyAssignmentNameRoRootFilesystem": "[guid(variables('policyResourceIdRoRootFilesystem'), resourceGroup().name, variables('clusterName'))]",
        "policyAssignmentNameEnforceResourceLimits": "[guid(variables('policyResourceIdEnforceResourceLimits'), resourceGroup().name, variables('clusterName'))]",
        "policyAssignmentNameEnforceImageSource": "[guid(variables('policyResourceIdEnforceImageSource'), resourceGroup().name, variables('clusterName'))]"
    },
    "resources": [
        {
            "name": "[variables('clusterControlPlaneIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]",
            "comments": "The control plane identity used by the cluster. Used for networking access (VNET joining and DNS updating)"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "mi-appgateway-frontend",
            "location": "[parameters('location')]",
            "comments": "User Managed Identity that App Gateway is assigned. Used for Azure Key Vault Access."
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "podmi-ingress-controller",
            "location": "[parameters('location')]",
            "comments": "User Managed Identity for the cluster's ingress controller pods. Used for Azure Key Vault Access."
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-appgateway-frontend')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'podmi-ingress-controller')]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-appgateway-frontend')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-appgateway-frontend')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ],
                            "keys": []
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','podmi-ingress-controller')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','podmi-ingress-controller')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ],
                            "keys": []
                        }
                    }
                ],
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "ipRules": [],
                    "virtualNetworkRules": []
                },
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": true
            },
            "resources": [
                {
                    "type": "secrets",
                    "apiVersion": "2019-09-01",
                    "name": "sslcert",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
                    ],
                    "properties": {
                        "value": "[parameters('appGatewayListenerCertificate')]",
                        "recoveryLevel": "Purgeable"
                    }
                },
                {
                    "type": "secrets",
                    "apiVersion": "2019-09-01",
                    "name": "appgw-ingress-internal-aks-ingress-contoso-com-tls",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    ],
                    "properties": {
                        "value": "[parameters('aksIngressControllerCertificate')]",
                        "recoveryLevel": "Purgeable"
                    }
                },
                {
                    "name": "Microsoft.Insights/default",
                    "type": "providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                },
                {
                    "type": "providers/roleAssignments",
                    "apiVersion": "2018-09-01-preview",
                    "name": "[concat('Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('readerRole')))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'podmi-ingress-controller')]"
                    ],
                    "comments": "Grant the AKS cluster ingress controller pod managed identity with reader role permissions over Key Vault; paired with the Access Policy, this allows our ingress controller to pull certificates.",
                    "properties": {
                        "roleDefinitionId": "[variables('readerRole')]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'podmi-ingress-controller')).principalId]",
                        "principalType": "ServicePrincipal"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-05-01",
            "name": "nodepools-to-akv",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "nodepools",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                            "groupIds": [
                                "vault"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-05-01",
                    "name": "default",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', 'nodepools-to-akv')]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('akvPrivateDnsZonesName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "privatelink-akv-net",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('akvPrivateDnsZonesName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
{
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('acrPrivateDnsZonesName')]",
            "location": "global",
            "comments": "Enabling Azure Container Registry Private Link on vnet.",
            "properties": {},
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat('to_', variables('vnetName'))]",
                    "location": "global",
                    "comments": "Enabling cluster vnet private zone DNS lookup - used by cluster vnet for direct DNS queries (ones not proxied via the hub).",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('acrPrivateDnsZonesName'))]"
                    ],
                    "properties": {
                        "virtualNetwork": {
                            "id": "[parameters('targetVnetResourceId')]"
                        },
                        "registrationEnabled": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2018-09-01",
            "name": "[variables('akvPrivateDnsZonesName')]",
            "location": "global",
            "comments": "Enabling Azure Key Vault Private Link support.",
            "properties": {},
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat('to_', variables('vnetName'))]",
                    "location": "global",
                    "comments": "Enabling Azure Key Vault Private Link on cluster vnet.",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('akvPrivateDnsZonesName'))]"
                    ],
                    "properties": {
                        "virtualNetwork": {
                            "id": "[parameters('targetVnetResourceId')]"
                        },
                        "registrationEnabled": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2018-09-01",
            "name": "aks-ingress.contoso.com",
            "location": "global",
            "properties": {},
            "resources": [
                {
                    "type": "A",
                    "apiVersion": "2018-09-01",
                    "name": "bu0001a0008-00",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'aks-ingress.contoso.com')]"
                    ],
                    "properties": {
                        "ttl": 3600,
                        "aRecords": [
                            {
                                "ipv4Address": "10.240.4.4"
                            }
                        ]
                    }
                },
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat('to_', variables('vnetName'))]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'aks-ingress.contoso.com')]"
                    ],
                    "properties": {
                        "virtualNetwork": {
                            "id": "[parameters('targetVnetResourceId')]"
                        },
                        "registrationEnabled": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2020-05-01",
            "name": "[variables('agwName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',  'mi-appgateway-frontend')]": {}
                }
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "sku": {
                    "name": "WAF_v2",
                    "tier": "WAF_v2"
                },
                "sslPolicy": {
                    "policyType": "Custom",
                    "cipherSuites": [
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
                    ],
                    "minProtocolVersion": "TLSv1_2"
                },
                "trustedRootCertificates": [
                    {
                        "name": "root-cert-wildcard-aks-ingress-contoso",
                        "properties": {
                            "keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/appgw-ingress-internal-aks-ingress-contoso-com-tls')]"
                        }
                    }
                ],
                "gatewayIPConfigurations": [
                    {
                        "name": "apw-ip-configuration",
                        "properties": {
                            "subnet": {
                                "id": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-applicationgateway')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "apw-frontend-ip-configuration",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId(subscription().subscriptionId, variables('vNetResourceGroup'), 'Microsoft.Network/publicIpAddresses', 'pip-BU0001A0008-00')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "apw-frontend-ports",
                        "properties": {
                            "port": 443
                        }
                    }
                ],
                "autoscaleConfiguration": {
                    "minCapacity": 0,
                    "maxCapacity": 10
                },
                "webApplicationFirewallConfiguration": {
                    "enabled": true,
                    "firewallMode": "Prevention",
                    "ruleSetType": "OWASP",
                    "ruleSetVersion": "3.0"
                },
                "enableHttp2": false,
                "sslCertificates": [
                    {
                        "name": "[concat(variables('agwName'), '-ssl-certificate')]",
                        "properties": {
                            "keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/sslcert')]"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "probe-bu0001a0008-00.aks-ingress.contoso.com",
                        "properties": {
                            "protocol": "Https",
                            "path": "/favicon.ico",
                            "interval": 30,
                            "timeout": 30,
                            "unhealthyThreshold": 3,
                            "pickHostNameFromBackendHttpSettings": true,
                            "minServers": 0,
                            "match": {
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "bu0001a0008-00.aks-ingress.contoso.com",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "bu0001a0008-00.aks-ingress.contoso.com"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "aks-ingress-contoso-backendpool-httpsettings",
                        "properties": {
                            "port": 443,
                            "protocol": "Https",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "requestTimeout": 20,
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('agwName')), '/probes/probe-bu0001a0008-00.aks-ingress.contoso.com')]"
                            },
                            "trustedRootCertificates": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('agwName')), '/trustedRootCertificates/root-cert-wildcard-aks-ingress-contoso')]"
                                }
                            ]
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "listener-https",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('apwResourceId'), '/frontendIPConfigurations/apw-frontend-ip-configuration')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('apwResourceId'), '/frontendPorts/apw-frontend-ports')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(variables('apwResourceId'), '/sslCertificates/', variables('agwName'), '-ssl-certificate')]"
                            },
                            "hostName": "bicycle.contoso.com",
                            "hostNames": [
                            ],
                            "requireServerNameIndication": true
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "apw-routing-rules",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('apwResourceId'), '/httpListeners/listener-https')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('apwResourceId'), '/backendAddressPools/bu0001a0008-00.aks-ingress.contoso.com')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('apwResourceId'), '/backendHttpSettingsCollection/aks-ingress-contoso-backendpool-httpsettings')]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "/Microsoft.Insights/default",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationGateways', variables('agwName'))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "ApplicationGatewayAccessLog",
                                "enabled": true
                            },
                            {
                                "category": "ApplicationGatewayPerformanceLog",
                                "enabled": true
                            },
                            {
                                "category": "ApplicationGatewayFirewallLog",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterIdentityHasRbacToSelfManagedResources",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('clusterControlPlaneIdentityName'))]"
            ],
            "resourceGroup": "[variables('vNetResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[guid(variables('vnetNodePoolSubnetResourceId'), variables('networkContributorRole'), variables('clusterControlPlaneIdentityName'))]",
                            "scope": "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', 'snet-clusternodes')]",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "description": "Allows cluster identity to join the nodepool vmss resources to this subnet.",
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('clusterControlPlaneIdentityName'))).principalId]",
                                "principalType": "ServicePrincipal"
                            }
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[guid(variables('vnetIngressServicesSubnetResourceId'), variables('networkContributorRole'), variables('clusterControlPlaneIdentityName'))]",
                            "scope": "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', 'snet-clusteringressservices')]",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "description": "Allows cluster identity to join load balancers (ingress resources) to this subnet.",
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('clusterControlPlaneIdentityName'))).principalId]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterUserAssignedHasRbacToManageVMSS",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "resourceGroup": "[variables('nodeResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[guid(resourceGroup().id)]",
                            "comments": "It is required to grant the AKS cluster with Virtual Machine Contributor role permissions over the cluster infrastructure resource group to work with Managed Identities and aad-pod-identity. Otherwise MIC component fails while attempting to update MSI on VMSS cluster nodes",
                            "properties": {
                                "roleDefinitionId": "[variables('virtualMachineContributorRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2020-08-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            },
            "resources": [
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "AllPrometheus",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "All collected Prometheus information",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\"",
                        "version": 1
                    }
                },
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "ForbiddenReponsesOnIngress",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Increase number of forbidden response on the Ingress Controller",
                        "query": "let value = toscalar(InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize Value = avg(Val) by bin(TimeGenerated, 5m) | summarize min = min(Value)); InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize AggregatedValue = avg(Val)-value by bin(TimeGenerated, 5m) | order by TimeGenerated | render barchart",
                        "version": 1
                    }
                },
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "NodeRebootRequested",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Nodes reboot required by kured",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\" and Name == \"kured_reboot_required\" | where Val > 0",
                        "version": 1
                    }
                }
            ]
        },
        {
            "name": "PodFailedScheduledQuery",
            "type": "Microsoft.Insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "description": "Alert on pod Failed phase.",
                "enabled": "true",
                "source": {
                    "query": "[concat('//https://docs.microsoft.com/azure/azure-monitor/insights/container-insights-alerts \r\n let endDateTime = now(); let startDateTime = ago(1h); let trendBinSize = 1m; let clusterName = \"',variables('clusterName'),'\"; KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | where ClusterName == clusterName | distinct ClusterName, TimeGenerated | summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName | join hint.strategy=broadcast ( KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus | summarize TotalCount = count(), PendingCount = sumif(1, PodStatus =~ \"Pending\"), RunningCount = sumif(1, PodStatus =~ \"Running\"), SucceededCount = sumif(1, PodStatus =~ \"Succeeded\"), FailedCount = sumif(1, PodStatus =~ \"Failed\") by ClusterName, bin(TimeGenerated, trendBinSize) ) on ClusterName, TimeGenerated | extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount | project TimeGenerated, TotalCount = todouble(TotalCount) / ClusterSnapshotCount, PendingCount = todouble(PendingCount) / ClusterSnapshotCount, RunningCount = todouble(RunningCount) / ClusterSnapshotCount, SucceededCount = todouble(SucceededCount) / ClusterSnapshotCount, FailedCount = todouble(FailedCount) / ClusterSnapshotCount, UnknownCount = todouble(UnknownCount) / ClusterSnapshotCount| summarize AggregatedValue = avg(FailedCount) by bin(TimeGenerated, trendBinSize)')]",
                    "dataSourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": 5,
                    "timeWindowInMinutes": 10
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": 3,
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": 3,
                        "metricTrigger": {
                            "thresholdOperator": "GreaterThan",
                            "threshold": 2,
                            "metricTriggerType": "Consecutive"
                        }
                    }
                }
            }
        },
        {
            "type": "microsoft.insights/activityLogAlerts",
            "apiVersion": "2017-04-01",
            "name": "AllAzureAdvisorAlert",
            "location": "Global",
            "properties": {
                "scopes": [
                    "[resourceGroup().id]"
                ],
                "condition": {
                    "allOf": [
                        {
                            "field": "category",
                            "equals": "Recommendation"
                        },
                        {
                            "field": "operationName",
                            "equals": "Microsoft.Advisor/recommendations/available/action"
                        }
                    ]
                },
                "actions": {
                    "actionGroups": [
                    ]
                },
                "enabled": true,
                "description": "All azure advisor alerts"
            }
        },
        {
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('containerInsightsSolutionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[variables('containerInsightsSolutionName')]",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },
        {
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "name": "[concat('AzureAppGatewayAnalytics(', variables('logAnalyticsWorkspaceName'),')')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[concat('AzureAppGatewayAnalytics(', variables('logAnalyticsWorkspaceName'),')')]",
                "product": "OMSGallery/AzureAppGatewayAnalytics",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },
        {
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "name": "[concat('KeyVaultAnalytics(', variables('logAnalyticsWorkspaceName'),')')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[concat('KeyVaultAnalytics(', variables('logAnalyticsWorkspaceName'),')')]",
                "product": "OMSGallery/KeyVaultAnalytics",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2020-11-01-preview",
            "name": "[variables('defaultAcrName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Premium"
            },
            "properties": {
                "adminUserEnabled": false,
                "networkRuleSet": {
                    "defaultAction": "Deny",
                    "virtualNetworkRules": [],
                    "ipRules": []
                },
                "policies": {
                    "quarantinePolicy": {
                        "status": "disabled"
                    },
                    "trustPolicy": {
                        "type": "Notary",
                        "status": "disabled"
                    },
                    "retentionPolicy": {
                        "days": 15,
                        "status": "enabled"
                    }
                },
                "publicNetworkAccess": "Disabled",
                "encryption": {
                    "status": "disabled"
                },
                "dataEndpointEnabled": true,
                "networkRuleBypassOptions": "AzureServices",
                "zoneRedundancy": "Disabled" // This Preview feature only supports three regions at this time, and eastus2's paired region (centralus), does not support this. So disabling for now.
            },
            "resources": [
                {
                    "name": "[concat('Microsoft.Authorization/', guid(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), variables('acrPullRole')))]",
                    "type": "providers/roleAssignments",
                    "apiVersion": "2020-04-01-preview",
                    "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                        "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('acrPullRole')]",
                        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-12-01').identityProfile.kubeletidentity.objectId]",
                        "principalType": "ServicePrincipal"
                    }
                },
                {
                    "type": "replications",
                    "apiVersion": "2019-05-01",
                    "name": "[parameters('geoRedundancyLocation')]",
                    "location": "[parameters('geoRedundancyLocation')]",
                    "dependsOn": [
                        "[variables('defaultAcrName')]"
                    ],
                    "properties": {}
                },
                {
                    "type": "providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "Microsoft.Insights/default",
                    "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "metrics": [
                            {
                                "timeGrain": "PT1M",
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ],
                        "logs": [
                            {
                                "category": "ContainerRegistryRepositoryEvents",
                                "enabled": true
                            },
                            {
                                "category": "ContainerRegistryLoginEvents",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-05-01",
            "name": "nodepool-to-acr",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries/replications', variables('defaultAcrName'), parameters('geoRedundancyLocation'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "nodepools",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                            "groupIds": [
                                "registry"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-05-01",
                    "name": "default",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', 'nodepool-to-acr')]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('acrPrivateDnsZonesName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "privatelink-azurecr-io",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('acrPrivateDnsZonesName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2021-02-01",
            "name": "[variables('clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions', variables('containerInsightsSolutionName'))]",
                "[resourceId(variables('vNetResourceGroup'), 'Microsoft.Resources/deployments', 'EnsureClusterIdentityHasRbacToSelfManagedResources')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('clusterControlPlaneIdentityName'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameAKSLinuxRestrictive'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameEnforceHttpsIngress'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameEnforceImageSource'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameEnforceInternalLoadBalancers'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameEnforceResourceLimits'))]",
                "[resourceId('Microsoft.Authorization/policyAssignments', variables('policyAssignmentNameRoRootFilesystem'))]"
            ],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[uniqueString(subscription().subscriptionId, resourceGroup().id, variables('clusterName'))]",
                "agentPoolProfiles": [
                    {
                        "name": "npsystem",
                        "count": 3,
                        "vmSize": "Standard_DS2_v2",
                        "osDiskSizeGB": 80,
                        "osDiskType": "Ephemeral",
                        "osType": "Linux",
                        "minCount": 3,
                        "maxCount": 4,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ],
                        "upgradeSettings": {
                            "maxSurge": "33%"
                        }
                    },
                    {
                        "name": "npuser01",
                        "count": 2,
                        "vmSize": "Standard_DS3_v2",
                        "osDiskSizeGB": 120,
                        "osDiskType": "Ephemeral",
                        "osType": "Linux",
                        "minCount": 2,
                        "maxCount": 5,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "User",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ],
                        "upgradeSettings": {
                            "maxSurge": "33%"
                        }
                    }
                ],
                "servicePrincipalProfile": {
                    "clientId": "msi"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": false
                    },
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                        }
                    },
                    "aciConnectorLinux": {
                        "enabled": false
                    },
                    "azurepolicy": {
                        "enabled": true,
                        "config": {
                            "version": "v2"
                        }
                    }
                },
                "nodeResourceGroup": "[variables('nodeResourceGroupName')]",
                "enableRBAC": true,
                "enablePodSecurityPolicy": false,
                "maxAgentPools": 2,
                "networkProfile": {
                    "networkPlugin": "azure",
                    "networkPolicy": "azure",
                    "outboundType": "userDefinedRouting",
                    "loadBalancerSku": "standard",
                    "loadBalancerProfile": "[json('null')]",
                    "serviceCidr": "172.16.0.0/16",
                    "dnsServiceIP": "172.16.0.10",
                    "dockerBridgeCidr": "172.18.0.1/16"
                },
                "aadProfile": {
                    "managed": true,
                    "enableAzureRBAC": false,
                    "adminGroupObjectIDs": [
                        "[parameters('clusterAdminAadGroupObjectId')]"
                    ],
                    "tenantID": "[parameters('k8sControlPlaneAuthorizationTenantId')]"
                },
                "autoScalerProfile": {
                    "balance-similar-node-groups": "false",
                    "expander": "random",
                    "max-empty-bulk-delete": "10",
                    "max-graceful-termination-sec": "600",
                    "max-node-provision-time": "15m",
                    "max-total-unready-percentage": "45",
                    "new-pod-scale-up-delay": "0s",
                    "ok-total-unready-count": "3",
                    "scale-down-delay-after-add": "10m",
                    "scale-down-delay-after-delete": "20s",
                    "scale-down-delay-after-failure": "3m",
                    "scale-down-unneeded-time": "10m",
                    "scale-down-unready-time": "20m",
                    "scale-down-utilization-threshold": "0.5",
                    "scan-interval": "10s",
                    "skip-nodes-with-local-storage": "true",
                    "skip-nodes-with-system-pods": "true"
                },
                "apiServerAccessProfile": {
                    "authorizedIPRanges": "[parameters('clusterAuthorizedIPRanges')]",
                    "enablePrivateCluster": false
                },
                "podIdentityProfile": { 
                    "enabled": false, /* This feature is currently in preview and will eventually replace the aad-pod-identity configuration set up by hand in this reference implementation */
                    "userAssignedIdentities": [],
                    "userAssignedIdentityExceptions": []
                }
            },
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('clusterControlPlaneIdentityName'))]": {}
                }
            },
            "resources": [
                {
                    "name": "[concat('Microsoft.Authorization/', guid(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), 'omsagent', variables('monitoringMetricsPublisherRole')))]",
                    "type": "providers/roleAssignments",
                    "apiVersion": "2020-04-01-preview",
                    "comments": "Grant the OMS Agent's Managed Identity the metrics publisher role to push alerts",
                    "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
                        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-12-01').addonProfiles.omsagent.identity.objectId]",
                        "principalType": "ServicePrincipal"
                    }
                },
                {
                    "type": "/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "Microsoft.Insights/default",
                    "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "cluster-autoscaler",
                                "enabled": true
                            },
                            {
                                "category": "kube-controller-manager",
                                "enabled": true
                            },
                            {
                                "category": "kube-audit-admin",
                                "enabled": true
                            },
                            {
                                "category": "guard",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Node CPU utilization high for ', variables('clusterName'), ' CI-1')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "cpuUsagePercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node CPU utilization across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Node working set memory utilization high for ', variables('clusterName'), ' CI-2')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "memoryWorkingSetPercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node working set memory utilization across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Jobs completed more than 6 hours ago for ', variables('clusterName'), ' CI-11')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "completedJobsCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors completed jobs (more than 6 hours ago).",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Container CPU usage high for ', variables('clusterName'), ' CI-9')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "cpuExceededPercentage",
                            "metricNamespace": "Insights.Container/containers",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 90.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors container CPU utilization.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Container working set memory usage high for ', variables('clusterName'), ' CI-10')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "memoryWorkingSetExceededPercentage",
                            "metricNamespace": "Insights.Container/containers",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 90.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors container working set memory utilization.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Pods in failed state for ', variables('clusterName'), ' CI-4')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "phase",
                                    "operator": "Include",
                                    "values": [
                                        "Failed"
                                    ]
                                }
                            ],
                            "metricName": "podCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Pod status monitoring.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Disk usage high for ', variables('clusterName'), ' CI-5')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "device",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "DiskUsedPercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors disk usage for all nodes and storage devices.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Nodes in not ready status for ', variables('clusterName'), ' CI-3')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "status",
                                    "operator": "Include",
                                    "values": [
                                        "NotReady"
                                    ]
                                }
                            ],
                            "metricName": "nodesCount",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node status monitoring.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Containers getting OOM killed for ', variables('clusterName'), ' CI-6')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "oomKilledContainerCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors number of containers killed due to out of memory (OOM) error.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Persistent volume usage high for ', variables('clusterName'), ' CI-18')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "podName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetesNamespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "pvUsageExceededPercentage",
                            "metricNamespace": "Insights.Container/persistentvolumes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors persistent volume utilization.",
                "enabled": false,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Pods not in ready state for ', variables('clusterName'), ' CI-8')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "PodReadyPercentage",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "LessThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors for excessive pods not in the ready state.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Restarting container count for ', variables('clusterName'), ' CI-7')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "restartingContainerCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors number of containers restarting across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "Microsoft.ContainerService/managedClusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat('podmi-ingress-controller', '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('managedIdentityOperatorRole')))]",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the managed identity used for the ingress controller.  Allows it to be assigned to the underlying VMSS.",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-11-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameAKSLinuxRestrictive')]",
            "comments": "Applying the 'AKS Linux Restrictive' policy to the resource group",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdAKSLinuxRestrictive'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdAKSLinuxRestrictive')]",
                "parameters": {
                    "excludedNamespaces": {
                        "value": [
                            "kube-system",
                            "gatekeeper-system",
                            "azure-arc",
                            "cluster-baseline-settings"
                        ]
                    },
                    "effect": {
                        "value": "audit"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameEnforceHttpsIngress')]",
            "comments": "Applying the 'Enforce HTTPS ingress in Kubernetes cluster' policy to the resource group.",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdEnforceHttpsIngress'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdEnforceHttpsIngress')]",
                "parameters": {
                    "excludedNamespaces": {
                        "value": []
                    },
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameEnforceInternalLoadBalancers')]",
            "comments": "Applying the 'Enforce internal load balancers in Kubernetes cluster' policy to the resource group.",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdEnforceInternalLoadBalancers'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdEnforceInternalLoadBalancers')]",
                "parameters": {
                    "excludedNamespaces": {
                        "value": []
                    },
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameRoRootFilesystem')]",
            "comments": "Applying the 'Kubernetes cluster containers should run with a read only root file system' policy to the resource group.",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdRoRootFilesystem'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdRoRootFilesystem')]",
                "parameters": {
                    "excludedNamespaces": {
                        "value": [
                            "kube-system",
                            "gatekeeper-system",
                            "azure-arc"
                        ]
                    },
                    "effect": {
                        "value": "audit"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameEnforceResourceLimits')]",
            "comments": "Applying the 'Container Images Resource Limits' policy at the resource group level.",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdEnforceResourceLimits'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdEnforceResourceLimits')]",
                "parameters": {
                    "cpuLimit": {
                        "value": "1000m"
                    },
                    "memoryLimit": {
                        "value": "512Mi"
                    },
                    "excludedNamespaces": {
                        "value": [
                            "kube-system",
                            "gatekeeper-system",
                            "azure-arc",
                            "cluster-baseline-settings"
                        ]
                    },
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2020-03-01",
            "name": "[variables('policyAssignmentNameEnforceImageSource')]",
            "comments": "Applying the 'Allowed Container Images' regex policy at the resource group level. If all images are pull into your ARC instance as described in these instructions you can remove the docker.io entries.",
            "properties": {
                "displayName": "[concat('[', variables('clusterName'),'] ', reference(variables('policyResourceIdEnforceImageSource'), '2020-09-01').displayName)]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
                "policyDefinitionId": "[variables('policyResourceIdEnforceImageSource')]",
                "parameters": {
                    "allowedContainerImagesRegex": {
                        "value": "[concat(variables('defaultAcrName'),'.azurecr.io/.+$|mcr.microsoft.com/.+$|docker.io/fluxcd/flux.+$|docker.io/weaveworks/kured.+$|docker.io/library/.+$')]"
                    },
                    "excludedNamespaces": {
                        "value": [
                            "kube-system",
                            "gatekeeper-system",
                            "azure-arc"
                        ]
                    },
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        }
    ],
    "outputs": {
        "aksClusterName": {
            "type": "string",
            "value": "[variables('clusterName')]"
        },
        "agwName": {
            "type": "string",
            "value": "[variables('agwName')]"
        },
        "aksIngressControllerPodManagedIdentityResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'podmi-ingress-controller')]"
        },
        "aksIngressControllerPodManagedIdentityClientId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','podmi-ingress-controller'), '2018-11-30').clientId]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "containerRegistryName": {
            "type": "string",
            "value": "[variables('defaultAcrName')]"
        }
    }
}
