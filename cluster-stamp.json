{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.0.3",
    "parameters": {
        "targetVnetResourceId": {
            "type": "string",
            "metadata": {
                "description": "The regional network spoke VNet Resource ID that the cluster will be joined to"
            }
        },
        "k8sRbacAadProfileAdminGroupObjectID": {
            "type": "string",
            "metadata": {
                "description": "Group that has admin access to this cluster"
            }
        },
        "k8sRbacAadProfileTenantId": {
            "type": "string",
            "metadata": {
                "description": "This is tennant where the ServerAppId, ServerAppSecret, ClientAppId all reside"
            }
        },
        "appGatewayListenerCertificate": {
            "type": "string",
            "metadata": {
                "description": "The certificate data for app gateway TLS termination. It is base64"
            }
        },
        "location": {
            "defaultValue": "eastus2",
            "type": "string",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "westus2",
                "francecentral",
                "northeurope",
                "uksouth",
                "westeurope",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "AKS Service, Node Pool, and supporting services (KeyVault, App Gateway, etc) region.  The network team maintains this approved regional list which is a subset of zones with Availability Zone support."
            }
        },
        "geoRedundancyLocation": {
            "defaultValue": "centralus",
            "type": "string",
            "allowedValues": [
                "eastus2",
                "westus",
                "centralus",
                "westcentralus",
                "francesouth",
                "westeurope",
                "ukwest",
                "northeurope",
                "japanwest",
                "eastasia",
                "eastus",
                "westus2",
                "francecentral",
                "uksouth",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "For Azure resources that support native geo-redunancy, provide the location the redundant service will have its secondary. Should be different than the location parameter and ideally should be a paired region - https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions. This region does not need to support availability zones."
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.17.5",
            "type": "string"
        }
    },
    "variables": {
        "networkContributorRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7')]",
        "monitoringMetricsPublisherRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
        "acrPullRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "managedIdentityOperatorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830')]",
        "virtualMachineContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
        "readerRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7')]",

        "subRgUniqueString": "[uniqueString('aks', subscription().subscriptionId, resourceGroup().id)]",

        "nodeResourceGroupName": "[concat('rg-', variables('clusterName'), '-nodepools')]",
        "clusterName": "[concat('aks-', variables('subRgUniqueString'))]",
        "logAnalyticsWorkspaceName": "[concat('la-', variables('clusterName'))]",
        "containerInsightsSolutionName": "[concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')')]",
        "defaultAcrName": "[concat('acraks', variables('subRgUniqueString'))]",

        "vNetResourceGroup": "[split(parameters('targetVnetResourceId'),'/')[4]]",
        "vnetNodePoolSubnetResourceId": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-clusternodes')]",

        "agwName": "[concat( 'apw-', variables('clusterName')) ]",
        "apwResourceId": "[resourceId('Microsoft.Network/applicationGateways', variables('agwName'))]",

        "keyVaultName": "[concat( 'kv-', variables('clusterName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "appw-to-keyvault",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "aksic-to-keyvault",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'appw-to-keyvault')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','appw-to-keyvault')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','appw-to-keyvault')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ]
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ]
                        }
                    }
                ],
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]"
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "nodepool-to-akv",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "nodepoolsubnet-to-akv",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                            "groupIds": [
                                "vault"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2020-04-01",
            "name": "nodepool-to-akv/default",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'nodepool-to-akv')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "privatelink-akv-net",
                        "properties": {
                            "privateDnsZoneId": "[resourceId(variables('vNetResourceGroup'),'Microsoft.Network/privateDnsZones','privatelink.vaultcore.azure.net')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat( variables('keyVaultName') , '/sslcert')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
            ],
            "properties": {
                "value": "[parameters('appGatewayListenerCertificate')]",
                "recoveryLevel": "Purgeable"
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2018-09-01",
            "name": "aks-ingress.contoso.com",
            "location": "global",
            "resources": [
                {
                    "type": "A",
                    "apiVersion": "2018-09-01",
                    "name": "bu0001a0008-00",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'aks-ingress.contoso.com')]"
                    ],
                    "properties": {
                        "ttl": 3600,
                        "aRecords": [
                            {
                                "ipv4Address": "10.240.4.4"
                            }
                        ]
                    }
                }
            ],
            "properties": {
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2018-09-01",
            "name": "[concat('aks-ingress.contoso.com/cluster-dns-link')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones','aks-ingress.contoso.com')]"
            ],
            "properties": {
                "virtualNetwork": {
                    "id": "[parameters('targetVnetResourceId')]"
                },
                "registrationEnabled": false
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2019-11-01",
            "name": "[variables('agwName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',  'appw-to-keyvault')]": {
                    }
                }
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "tags": {
            },
            "properties": {
                "sku": {
                    "name": "WAF_v2",
                    "tier": "WAF_v2"
                },
                "sslPolicy": {
                    "policyType": "Custom",
                    "cipherSuites": [
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
                    ],
                    "minProtocolVersion": "TLSv1_2"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "apw-ip-configuration",
                        "properties": {
                            "subnet": {
                                "id": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-applicationgateways')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "apw-frontend-ip-configuration",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId(subscription().subscriptionId,variables('vNetResourceGroup'),'Microsoft.Network/publicIpAddresses','pip-BU0001A0008-00')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "apw-frontend-ports",
                        "properties": {
                            "port": 443
                        }
                    }
                ],
                "autoscaleConfiguration": {
                    "minCapacity": "0",
                    "maxCapacity": "10"
                },
                "webApplicationFirewallConfiguration": {
                    "enabled": true,
                    "firewallMode": "Prevention",
                    "ruleSetType": "OWASP",
                    "ruleSetVersion": "3.0"
                },
                "enableHttp2": false,
                "sslCertificates": [
                    {
                        "name": "[concat(variables('agwName'), '-ssl-certificate')]",
                        "properties": {
                            "keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/sslcert')]"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "probe-bu0001a0008-00.aks-ingress.contoso.com",
                        "properties": {
                            "protocol": "Https",
                            "path": "/favicon.ico",
                            "interval": 30,
                            "timeout": 30,
                            "unhealthyThreshold": 3,
                            "pickHostNameFromBackendHttpSettings": true,
                            "minServers": 0,
                            "match": {
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "bu0001a0008-00.aks-ingress.contoso.com",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "bu0001a0008-00.aks-ingress.contoso.com"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "aks-ingress-contoso-backendpool-httpsettings",
                        "properties": {
                            "port": 443,
                            "protocol": "Https",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "requestTimeout": 20,
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('agwName')),'/probes/probe-bu0001a0008-00.aks-ingress.contoso.com')]"
                            }
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "listener-https",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('apwResourceId'), '/frontendIPConfigurations/apw-frontend-ip-configuration')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('apwResourceId'), '/frontendPorts/apw-frontend-ports')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(variables('apwResourceId'), '/sslCertificates/', variables('agwName'), '-ssl-certificate')]"
                            },
                            "hostName": "bicycle.contoso.com",
                            "hostNames": [
                            ],
                            "requireServerNameIndication": true
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "apw-routing-rules",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('apwResourceId'), '/httpListeners/listener-https')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('apwResourceId'), '/backendAddressPools/bu0001a0008-00.aks-ingress.contoso.com')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('apwResourceId'), '/backendHttpSettingsCollection/aks-ingress-contoso-backendpool-httpsettings')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterSpHasRbacToVNet",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "resourceGroup": "[variables('vNetResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(split(parameters('targetVnetResourceId'),'/')[8], '/Microsoft.Authorization/', guid(resourceGroup().id, variables('networkContributorRole'),'-aks-system-assigned-managed-identity-ilb'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01', 'Full').identity.principalId]",
                                "scope": "[parameters('targetVnetResourceId')]"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterUserAssignedHasRbacToManageVMSS",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "resourceGroup": "[variables('nodeResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "name": "[guid(resourceGroup().id)]",
                            "apiVersion": "2018-09-01-preview",
                            "comments": "It is required to grant the AKS cluster with Virtual Machine Contributor role permissions over the cluster infrastructure resource group to work with Managed Identities and aad-pod-identity. Otherwise MIC component fails while attempting to update MSI on VMSS cluster nodes",
                            "properties": {
                                "roleDefinitionId": "[variables('virtualMachineContributorRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            },
            "resources": [
                {
                    "apiVersion": "2015-03-20",
                    "name": "PrometheusQuery1",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "All collected Prometheus information",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\"",
                        "version": 1
                    }
                },
                {
                    "apiVersion": "2015-03-20",
                    "name": "PrometheusQuery2",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Increase number of forbidden response on the Ingress Controller",
                        "query": "let value = toscalar(InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize Value = avg(Val) by bin(TimeGenerated, 5m) | summarize min = min(Value)); InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize AggregatedValue = avg(Val)-value by bin(TimeGenerated, 5m) | order by TimeGenerated | render barchart",
                        "version": 1
                    }
                },
                {
                    "apiVersion": "2015-03-20",
                    "name": "PrometheusQuery3",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Nodes reboot required by kured",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\" and Name == \"kured_reboot_required\" | where Val > 0",
                        "version": 1
                    }
                }
            ]
        },
        {
            "name": "PodFailedPhase",
            "type": "microsoft.insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "description": "Alert on pod Failed phase.",
                "enabled": "true",
                "source": {
                    "query": "[concat('//https://docs.microsoft.com/azure/azure-monitor/insights/container-insights-alerts \r\n let endDateTime = now(); let startDateTime = ago(1h); let trendBinSize = 1m; let clusterName = \"',variables('clusterName'),'\"; KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | where ClusterName == clusterName | distinct ClusterName, TimeGenerated | summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName | join hint.strategy=broadcast ( KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus | summarize TotalCount = count(), PendingCount = sumif(1, PodStatus =~ \"Pending\"), RunningCount = sumif(1, PodStatus =~ \"Running\"), SucceededCount = sumif(1, PodStatus =~ \"Succeeded\"), FailedCount = sumif(1, PodStatus =~ \"Failed\") by ClusterName, bin(TimeGenerated, trendBinSize) ) on ClusterName, TimeGenerated | extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount | project TimeGenerated, TotalCount = todouble(TotalCount) / ClusterSnapshotCount, PendingCount = todouble(PendingCount) / ClusterSnapshotCount, RunningCount = todouble(RunningCount) / ClusterSnapshotCount, SucceededCount = todouble(SucceededCount) / ClusterSnapshotCount, FailedCount = todouble(FailedCount) / ClusterSnapshotCount, UnknownCount = todouble(UnknownCount) / ClusterSnapshotCount| summarize AggregatedValue = avg(FailedCount) by bin(TimeGenerated, trendBinSize)')]",
                    "dataSourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": "5",
                    "timeWindowInMinutes": "10"
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "3",
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": "3",
                        "metricTrigger": {
                            "thresholdOperator": "GreaterThan",
                            "threshold": "2",
                            "metricTriggerType": "Consecutive"
                        }
                    }
                }
            }
        },
        {
            "type": "microsoft.insights/activityLogAlerts",
            "apiVersion": "2017-04-01",
            "name": "AllAzureAdvisorAlert",
            "location": "Global",
            "properties": {
                "scopes": [
                    "[resourceGroup().id]"
                ],
                "condition": {
                    "allOf": [
                        {
                            "field": "category",
                            "equals": "Recommendation"
                        },
                        {
                            "field": "operationName",
                            "equals": "Microsoft.Advisor/recommendations/available/action"
                        }
                    ]
                },
                "actions": {
                    "actionGroups": [
                    ]
                },
                "enabled": true,
                "description": "All azure advisor alerts"
            }
        },
        {
            "apiVersion": "2015-11-01-preview",
            "type": "Microsoft.OperationsManagement/solutions",
            "name": "[variables('containerInsightsSolutionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[variables('containerInsightsSolutionName')]",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2019-05-01",
            "name": "[variables('defaultAcrName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Premium"
            },
            "properties": {
                "adminUserEnabled": false,
                "networkRuleSet": {
                    "defaultAction": "Deny",
                    "virtualNetworkRules": [
                    ],
                    "ipRules": [
                    ]
                },
                "policies": {
                    "quarantinePolicy": {
                        "status": "disabled"
                    },
                    "trustPolicy": {
                        "type": "Notary",
                        "status": "disabled"
                    },
                    "retentionPolicy": {
                        "days": 15,
                        "status": "enabled"
                    }
                }
            },
            "resources": [
                {
                    "type": "replications",
                    "apiVersion": "2019-05-01",
                    "name": "[parameters('geoRedundancyLocation')]",
                    "location": "[parameters('geoRedundancyLocation')]",
                    "dependsOn": [
                        "[variables('defaultAcrName')]"
                    ],
                    "properties": {
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "nodepool-to-acr",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries/replications', variables('defaultAcrName'), parameters('geoRedundancyLocation'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "nodepoolsubnet-to-registry",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                            "groupIds": [
                                "registry"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2020-04-01",
            "name": "[concat('nodepool-to-acr', '/default')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'nodepool-to-acr')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "privatelink-azurecr-io",
                        "properties": {
                            "privateDnsZoneId": "[resourceId(variables('vNetResourceGroup'), 'Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2020-03-01",
            "name": "[variables('clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions', variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[uniqueString(subscription().subscriptionId, resourceGroup().id, variables('clusterName'))]",
                "agentPoolProfiles": [
                    {
                        "name": "npsystem",
                        "count": 3,
                        "vmSize": "Standard_DS2_v2",
                        "osDiskSizeGB": 512,
                        "osType": "Linux",
                        "minCount": 3,
                        "maxCount": 4,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ]
                    },
                    {
                        "name": "npuser01",
                        "count": 2,
                        "vmSize": "Standard_DS3_v2",
                        "osDiskSizeGB": 512,
                        "osType": "Linux",
                        "minCount": 2,
                        "maxCount": 5,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "User",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ]
                    }
                ],
                "servicePrincipalProfile": {
                    "clientId": "msi",
                    "secret": null
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": false
                    },
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                        }
                    },
                    "aciConnectorLinux": {
                        "enabled": false
                    },
                    "azurePolicy": {
                        "enabled": true,
                        "config": {
                            "version": "v2"
                        }
                    },
                    "kubeDashboard": {
                        "enabled": false
                    }
                },
                "nodeResourceGroup": "[variables('nodeResourceGroupName')]",
                "enableRBAC": true,
                "enablePodSecurityPolicy": false,
                "maxAgentPools": 2,
                "networkProfile": {
                    "networkPlugin": "azure",
                    "networkPolicy": "azure",
                    "outboundType": "userDefinedRouting",
                    "loadBalancerSku": "standard",
                    "loadBalancerProfile": "[json('null')]",
                    "serviceCidr": "172.16.0.0/16",
                    "dnsServiceIP": "172.16.0.10",
                    "dockerBridgeCidr": "172.18.0.1/16"
                },
                "aadProfile": {
                    "managed": true,
                    "adminGroupObjectIDs": [
                        "[parameters('k8sRbacAadProfileAdminGroupObjectID')]"
                    ],
                    "tenantID": "[parameters('k8sRbacAadProfileTenantId')]"
                },
                "autoScalerProfile": {
                    "scan-interval": "10s",
                    "scale-down-delay-after-add": "10m",
                    "scale-down-delay-after-delete": "20s",
                    "scale-down-delay-after-failure": "3m",
                    "scale-down-unneeded-time": "10m",
                    "scale-down-unready-time": "20m",
                    "scale-down-utilization-threshold": "0.5",
                    "max-graceful-termination-sec": "600"
                },
                "apiServerAccessProfile": {
                    "enablePrivateCluster": false
                }
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('clusterName'), '/Microsoft.Insights/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "cluster-autoscaler",
                        "enabled": true
                    },
                    {
                        "category": "kube-controller-manager",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('clusterName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('monitoringMetricsPublisherRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat('aksic-to-keyvault', '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('managedIdentityOperatorRole')))]",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the cluster resource group",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('keyVaultName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('readerRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
            ],
            "comments": "Grant the AKS cluster ingress controller with reader role permissions over KeyVault",
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).principalId]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('defaultAcrName'), '/Microsoft.Insights/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "metrics": [
                    {
                        "timeGrain": "PT1M",
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ],
                "logs": [
                    {
                        "category": "ContainerRegistryRepositoryEvents",
                        "enabled": true
                    },
                    {
                        "category": "ContainerRegistryLoginEvents",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('defaultAcrName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('acrPullRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('defaultAcrName'))]",
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]"
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[concat( 'pa-restrictive-initiative-', variables('clusterName'))]",
            "apiVersion": "2019-09-01",
            "properties": {
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "audit"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[concat( 'pa-enforce-https-ingress', variables('clusterName'))]",
            "apiVersion": "2019-09-01",
            "properties": {
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[concat( 'pa-enforce-internal-load-balancers', variables('clusterName'))]",
            "apiVersion": "2019-09-01",
            "properties": {
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[concat( 'pa-readonly-root-fs', variables('clusterName'))]",
            "apiVersion": "2019-09-01",
            "properties": {
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/df49d893-a74c-421d-bc95-c663042e5b80",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "audit"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[concat( 'pa-enforce-resources-wo-exceeding', variables('clusterName'))]",
            "apiVersion": "2019-09-01",
            "properties": {
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/e345eecc-fa47-480f-9e88-67dcc122b164",
              "parameters": {
                "cpuLimit": {
                  "value": "1000"
                },
                "memoryLimit": {
                  "value": "512"
                },
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        }
    ],
    "outputs": {
        "aksClusterName": {
            "type": "string",
            "value": "[variables('clusterName')]"
        },
        "agwName": {
            "type": "string",
            "value": "[variables('agwName')]"
        },
        "aksIngressControllerUserManageIdentityResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
        },
        "aksIngressControllerUserManageIdentityClientId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).clientId]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        }
    }
}
