# This workflow will deploy our cluster stamp, without the workload.
#
# Follow the next steps to use this workflow:
#
# 1. Ensure you have followed the prior sections before deploying this AKS cluster. This way, you will be capable of setting:
#    - the secrets values as detailed in the next step.
#    - the cluster parameter 
#
# 2. Create the following secrets in your GitHub repository:
#    - AZURE_CREDENTIALS                         The Azure Service Principal that will deploy the AKS cluster in your Azure subscription. For more information please take a look at https://github.com/Azure/login#configure-deployment-credentials
#    - APP_GATEWAY_LISTENER_REGION1_CERTIFICATE_BASE64   The certificate data for app gateway TLS termination. It is base64. Ideally fetch this secret from a platform-managed secret store such as Azure KeyVault: https://github.com/marketplace/actions/azure-key-vault-get-secrets
#    - APP_GATEWAY_LISTENER_REGION2_CERTIFICATE_BASE64   The certificate data for app gateway TLS termination. It is base64. Ideally fetch this secret from a platform-managed secret store such as Azure KeyVault: https://github.com/marketplace/actions/azure-key-vault-get-secrets
#    - AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64 The base 64 encoded AKS Ingress Controller public certificate (as .crt or .cer) to be stored in Azure Key Vault as secret and referenced by Azure Application Gateway as a trusted root certificate.

name: Deploy AKS Secure Baseline clusters stamp and Flux in different regions 

on:
  push:
    paths:
      - 'cluster-stamp.json'
      - '.github/workflows/aks-deploy.yaml'
    branches: [ main ]
env:
  DEPLOY_REGION1: 'true'
  DEPLOY_REGION2: 'true'
jobs:
  deploy:
    name: Deploy AKS cluster and Flux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Login into your Azure Subscription using your Azure credentials - make sure the credentials has write permissions for the specific resource group/subscription. The credentials should be stored in GitHub Secrets - (Go to Settings Tab ->Secrets)
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy the cluster (REGION1) into your environment, assuming all prerequisites are up and running.
    - name: Azure CLI - Deploy AKS cluster - Region 1
      id: aks-cluster-region1
      if: success() && env.DEPLOY_REGION1 == 'true'
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
         az group create --name far-rg-bu0001a0042-03 --location eastus2
         az deployment group create --resource-group far-rg-bu0001a0042-03 \
            --template-file "cluster-stamp.json" \
            --name "region1" \
            --parameters @azuredeploy.parameters.region1.json \
              appGatewayListenerCertificate=${{ secrets.APP_GATEWAY_LISTENER_REGION1_CERTIFICATE_BASE64 }} \
              aksIngressControllerCertificate=${{ secrets.AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64 }}

          echo "::set-output name=name::$(az deployment group show --resource-group far-rg-bu0001a0042-03 -n region1 --query properties.outputs.aksClusterName.value -o tsv)"
        azcliversion: 2.17.1

    # Set the AKS cluster context - Region 1
    - name: Set the AKS cluster context - Region 1
      uses: Azure/aks-set-context@v1
      if: success() && env.DEPLOY_REGION1 == 'true'
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ steps.aks-cluster-region1.outputs.name }}
        resource-group: far-rg-bu0001a0042-03

    # Create the cluster-baseline-settings namespace and deploy Flux into it - Region 1
    - name: Create the cluster-baseline-settings namespace and deploy Flux - Region 1
      uses: Azure/k8s-deploy@v1
      if: success() && env.DEPLOY_REGION1 == 'true'
      with:
        namespace: 'cluster-baseline-settings'
        manifests: |
          cluster-manifests/cluster-baseline-settings/ns-cluster-baseline-settings.yaml
          cluster-manifests/cluster-baseline-settings/flux.yaml

    # Deploy the cluster (REGION2) into your environment, assuming all prerequisites are up and running.
    - name: Azure CLI - Deploy AKS cluster - Region 2
      id: aks-cluster-region2
      uses: Azure/cli@v1.0.0
      if: success() && env.DEPLOY_REGION2 == 'true'
      with:
        inlineScript: |
         az group create --name far-rg-bu0001a0042-04 --location centralus
         az deployment group create --resource-group far-rg-bu0001a0042-04 \
            --template-file "cluster-stamp.json" \
            --name "region2" \
            --parameters @azuredeploy.parameters.region2.json \
              appGatewayListenerCertificate=${{ secrets.APP_GATEWAY_LISTENER_REGION2_CERTIFICATE_BASE64 }} \
              aksIngressControllerCertificate=${{ secrets.AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64 }}

          echo "::set-output name=name::$(az deployment group show --resource-group far-rg-bu0001a0042-04 -n region2 --query properties.outputs.aksClusterName.value -o tsv)"
        azcliversion: 2.17.1

    # Set the AKS cluster context - Region 2
    - name: Set the AKS cluster context - Region 2
      uses: Azure/aks-set-context@v1
      if: success() && env.DEPLOY_REGION2 == 'true'
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ steps.aks-cluster-region2.outputs.name }}
        resource-group: far-rg-bu0001a0042-04

    # Create the cluster-baseline-settings namespace and deploy Flux into it - Region 2
    - name: Create the cluster-baseline-settings namespace and deploy Flux - Region 2
      uses: Azure/k8s-deploy@v1
      if: success() && env.DEPLOY_REGION2 == 'true'
      with:
        namespace: 'cluster-baseline-settings'
        manifests: |
          cluster-manifests/cluster-baseline-settings/ns-cluster-baseline-settings.yaml
          cluster-manifests/cluster-baseline-settings/flux.yaml
